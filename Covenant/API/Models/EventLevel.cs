// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Covenant.API.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for EventLevel.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum EventLevel
    {
        [EnumMember(Value = "silent")]
        Silent,
        [EnumMember(Value = "info")]
        Info,
        [EnumMember(Value = "warning")]
        Warning,
        [EnumMember(Value = "highlight")]
        Highlight,
        [EnumMember(Value = "error")]
        Error
    }
    internal static class EventLevelEnumExtension
    {
        internal static string ToSerializedValue(this EventLevel? value)
        {
            return value == null ? null : ((EventLevel)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this EventLevel value)
        {
            switch( value )
            {
                case EventLevel.Silent:
                    return "silent";
                case EventLevel.Info:
                    return "info";
                case EventLevel.Warning:
                    return "warning";
                case EventLevel.Highlight:
                    return "highlight";
                case EventLevel.Error:
                    return "error";
            }
            return null;
        }

        internal static EventLevel? ParseEventLevel(this string value)
        {
            switch( value )
            {
                case "silent":
                    return EventLevel.Silent;
                case "info":
                    return EventLevel.Info;
                case "warning":
                    return EventLevel.Warning;
                case "highlight":
                    return EventLevel.Highlight;
                case "error":
                    return EventLevel.Error;
            }
            return null;
        }
    }
}
