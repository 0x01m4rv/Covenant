// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Covenant.API.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for LauncherType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum LauncherType
    {
        [EnumMember(Value = "wmic")]
        Wmic,
        [EnumMember(Value = "regsvr32")]
        Regsvr32,
        [EnumMember(Value = "mshta")]
        Mshta,
        [EnumMember(Value = "cscript")]
        Cscript,
        [EnumMember(Value = "wscript")]
        Wscript,
        [EnumMember(Value = "powerShell")]
        PowerShell,
        [EnumMember(Value = "binary")]
        Binary,
        [EnumMember(Value = "msBuild")]
        MsBuild,
        [EnumMember(Value = "installUtil")]
        InstallUtil
    }
    internal static class LauncherTypeEnumExtension
    {
        internal static string ToSerializedValue(this LauncherType? value)
        {
            return value == null ? null : ((LauncherType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this LauncherType value)
        {
            switch( value )
            {
                case LauncherType.Wmic:
                    return "wmic";
                case LauncherType.Regsvr32:
                    return "regsvr32";
                case LauncherType.Mshta:
                    return "mshta";
                case LauncherType.Cscript:
                    return "cscript";
                case LauncherType.Wscript:
                    return "wscript";
                case LauncherType.PowerShell:
                    return "powerShell";
                case LauncherType.Binary:
                    return "binary";
                case LauncherType.MsBuild:
                    return "msBuild";
                case LauncherType.InstallUtil:
                    return "installUtil";
            }
            return null;
        }

        internal static LauncherType? ParseLauncherType(this string value)
        {
            switch( value )
            {
                case "wmic":
                    return LauncherType.Wmic;
                case "regsvr32":
                    return LauncherType.Regsvr32;
                case "mshta":
                    return LauncherType.Mshta;
                case "cscript":
                    return LauncherType.Cscript;
                case "wscript":
                    return LauncherType.Wscript;
                case "powerShell":
                    return LauncherType.PowerShell;
                case "binary":
                    return LauncherType.Binary;
                case "msBuild":
                    return LauncherType.MsBuild;
                case "installUtil":
                    return LauncherType.InstallUtil;
            }
            return null;
        }
    }
}
