@page "/listener"
@page "/listener/index"

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization

@using Covenant.Core
@using Covenant.Models.Listeners
@using Covenant.Components.Profiles
@inject IJSRuntime IJSRuntime
@inherits CovenantServiceComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3">
    <h1 class="h2">Listeners</h1>
</div>

<ul class="nav nav-tabs mb-3" id="listener-tab" role="tablist">
    <li class="nav-item">
        <a class="nav-link" id="listeners-tab" data-toggle="tab" href="#listeners" role="tab" aria-controls="listeners" aria-selected="false">
            <span class="fe fe-headphones"></span>
            Listeners
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="profiles-tab" data-toggle="tab" href="#profiles" role="tab" aria-controls="profiles" aria-selected="false">
            <span class="fe fe-settings"></span>
            Profiles
        </a>
    </li>
</ul>

<div class="tab-content" id="listeners-tab-content">
    <div class="tab-pane fade" id="listeners" role="tabpanel" aria-labelledby="listeners-tab">
        <ListenerTable Listeners="Listeners" />
        <a href="/listener/create" class="btn btn-primary">
            <span class="fe fe-plus"></span>
            Create
        </a>
    </div>
    <div class="tab-pane fade" id="profiles" role="tabpanel" aria-labelledby="profiles-tab">
        <ProfileTable Profiles="Profiles" />
        @if (IsAdmin())
        {
            <a href="/profile/create" class="btn btn-primary">
                <span class="fe fe-plus"></span>
                Create
            </a>
        }
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<Listener> Listeners { get; set; }

    [Parameter]
    public IEnumerable<Profile> Profiles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.Listeners = this.Listeners ?? await ICovenantService.GetListeners();
        this.Profiles = this.Profiles ?? await ICovenantService.GetProfiles();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await IJSRuntime.InvokeAsync<string>("ShowTab", "#listeners-tab");
        }
    }

    private bool IsAdmin()
    {
        Task<AuthenticationState> t = AuthenticationStateProvider.GetAuthenticationStateAsync();
        t.Wait();
        return t.Result.User.IsInRole("Administrator");
    }
}
