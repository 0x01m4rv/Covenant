@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization

@using Covenant.Models.Listeners
@using Covenant.Components.Shared
@inject IJSRuntime IJSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<form action="@Action" method="POST">
    <input id="Id" name="Id" value="@Profile.Id" type="hidden">
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="Name">Name</label>
            <input id="Name" name="Name" value="@Profile.Name" class="form-control">
        </div>
        <div class="form-group">
            <label for="Type">Type</label><br />
            <EnumSelect id="Type" name="Type" @bind-Value="Profile.Type" disabled="true" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="Description">Description</label>
            <input id="Description" name="Description" value="@Profile.Description" class="form-control">
        </div>
    </div>
    <EditFormList FormList=@Profile.HttpUrls InputName="HttpUrls"></EditFormList>
    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="MessageTransform">MessageTransform</label>
            @if (IsAdmin())
            {
                <textarea @ref="CodeMirrorElements[0]" id="MessageTransform" name="MessageTransform" value="@Profile.MessageTransform" rows="10" class="form-control code-mirror-csharp"></textarea>
            }
            else
            {
                <textarea @ref="CodeMirrorElements[0]" id="MessageTransform" name="MessageTransform" value="@Profile.MessageTransform" rows="10" class="form-control code-mirror-csharp" hidden></textarea>
            }
        </div>
    </div>
    <EditFormKeyValueList FormList=@ToKeyValueList(Profile.HttpRequestHeaders) InputName="HttpRequestHeaders"></EditFormKeyValueList>
    <EditFormKeyValueList FormList=@ToKeyValueList(Profile.HttpResponseHeaders) InputName="HttpResponseHeaders"></EditFormKeyValueList>
    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="HttpPostRequest">HttpPostRequest</label>
            <textarea @ref="CodeMirrorElements[1]" id="HttpPostRequest" name="HttpPostRequest" value="@Profile.HttpPostRequest" rows="20" class="form-control code-mirror-html"></textarea>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="HttpGetResponse">HttpGetResponse</label>
            <textarea @ref="CodeMirrorElements[2]" id="HttpGetResponse" name="HttpGetResponse" value="@Profile.HttpGetResponse" rows="20" class="form-control code-mirror-html"></textarea>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-12">
            <label for="HttpPostResponse">HttpPostResponse</label>
            <textarea @ref="CodeMirrorElements[3]" id="HttpPostResponse" name="HttpPostResponse" value="@Profile.HttpPostResponse" rows="20" class="form-control code-mirror-html"></textarea>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">
        <span class="fe fe-@SubmitIcon"></span> @SubmitLabel
    </button>
</form>

@code {
    [Parameter]
    public HttpProfile Profile { get; set; }

    [Parameter]
    public string Action { get; set; } = "/profile/edithttp";

    [Parameter]
    public string SubmitIcon { get; set; } = "edit";

    [Parameter]
    public string SubmitLabel { get; set; } = "Edit";

    private IList<ElementReference> CodeMirrorElements { get; set; } = GetElementReferenceList(4);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        foreach (ElementReference CodeMirrorElement in CodeMirrorElements)
        {
            await IJSRuntime.InvokeAsync<string>("InitializeCodeMirror", CodeMirrorElement);
        }
    }

    private static IList<ElementReference> GetElementReferenceList(int size)
    {
        IList<ElementReference> references = new List<ElementReference>();
        for(int i = 0; i < size; i++)
        {
            references.Add(new ElementReference());
        }
        return references;
    }

    private IList<KeyValuePair<string, string>> ToKeyValueList(IList<HttpProfileHeader> headers)
    {
        return headers.Select(H => new KeyValuePair<string, string>(H.Name, H.Value)).ToList();
    }

    private bool IsAdmin()
    {
        Task<AuthenticationState> t = AuthenticationStateProvider.GetAuthenticationStateAsync();
        t.Wait();
        return t.Result.User.IsInRole("Administrator");
    }
}
